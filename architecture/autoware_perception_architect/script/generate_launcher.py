# Copyright 2025 TIER IV, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import xml.etree.ElementTree as ET
from xml.dom import minidom

from utils import load_config_yaml
from utils import pascal_to_snake


def create_module_launcher_xml(module_yaml, executable_name: str) -> str:
    launch_config = module_yaml.get("launch")
    package_name = launch_config.get("package")
    plugin_name = launch_config.get("plugin")
    node_output = launch_config.get("node_output", "screen")
    use_container = launch_config.get("use_container", False)
    if use_container and not launch_config.get("container_name"):
        raise ValueError("Container name is required when use_container is True")
    container_name = launch_config.get("container_name")

    input_list = module_yaml.get("inputs")
    output_list = module_yaml.get("outputs")
    param_path_list = module_yaml.get("parameters")
    configuration_list = module_yaml.get("configurations")
    node_name = pascal_to_snake(module_yaml.get("name").split(".")[0])

    # Create XML
    launch = ET.Element("launch")
    launch.append(ET.Comment("This file is auto-generated by the perception architecture"))
    ET.SubElement(launch, "arg", name="node_name", default=node_name)

    # Interface
    launch.append(ET.Comment("Interface"))
    for if_input in input_list:
        ET.SubElement(
            launch, "arg", name=f'input/{if_input.get("name")}', default=if_input.get("name")
        )
    for if_output in output_list:
        ET.SubElement(
            launch, "arg", name=f'output/{if_output.get("name")}', default=if_output.get("name")
        )

    # Parameter file paths
    launch.append(ET.Comment("Parameter file paths"))
    for param_path in param_path_list:
        ET.SubElement(
            launch,
            "arg",
            name=param_path.get("name"),
            default=param_path.get("default"),
        )

    # Configuration
    launch.append(ET.Comment("Configuration"))
    for config in configuration_list:
        default = (
            str(config.get("default")).lower()
            if config.get("type") == "bool"
            else config.get("default")
        )
        ET.SubElement(launch, "arg", name=config.get("name"), default=default)

    # Node
    if use_container:
        load_node = ET.SubElement(launch, "load_composable_node", target=container_name)
        node = ET.SubElement(
            load_node,
            "composable_node",
            pkg=package_name,
            plugin=plugin_name,
            name="$(arg node_name)",
        )
    else:
        node = ET.SubElement(
            launch,
            "node",
            pkg=package_name,
            exec=executable_name,
            name="$(arg node_name)",
            output=node_output,
        )

    # Remappings and parameters
    node.append(ET.Comment("Remap input and output topics"))
    for if_input in input_list:
        ET.SubElement(
            node,
            "remap",
            from_=f'~/input/{if_input.get("name")}',
            to=f'$(var input/{if_input.get("name")})',
        )
    for if_output in output_list:
        ET.SubElement(
            node,
            "remap",
            from_=f'~/output/{if_output.get("name")}',
            to=f'$(var output/{if_output.get("name")})',
        )

    node.append(ET.Comment("Parameters"))
    for param_path in param_path_list:
        ET.SubElement(
            node,
            "param",
            from_=f'$(var {param_path.get("name")})',
            allow_substs=str(param_path.get("allow_substs", "false")).lower(),
        )

    node.append(ET.Comment("Configurations"))
    for config in configuration_list:
        ET.SubElement(
            node, "param", name=config.get("name"), value=f'$(var {config.get("name")})'
        )

    # Pretty print XML
    xml_str = minidom.parseString(ET.tostring(launch, 'utf-8')).toprettyxml(indent="  ")
    return xml_str


def generate_launcher(module_yaml_dir, executable_name, launch_file_dir) -> None:
    module_yaml = load_config_yaml(module_yaml_dir)
    if not module_yaml or "name" not in module_yaml:
        print(f"Failed to load module configuration from {module_yaml_dir}")
        return

    module_name = module_yaml.get("name")
    launcher_xml = create_module_launcher_xml(module_yaml, executable_name)
    launch_file = f"{module_name}.launch.xml"
    launch_file_path = os.path.join(launch_file_dir, launch_file)

    os.makedirs(os.path.dirname(launch_file_path), exist_ok=True)
    with open(launch_file_path, "w") as f:
        f.write(launcher_xml)


if __name__ == "__main__":
    generate_launcher(sys.argv[1], sys.argv[2], sys.argv[3])
